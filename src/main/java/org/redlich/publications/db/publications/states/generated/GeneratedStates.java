package org.redlich.publications.db.publications.states.generated;

import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import org.redlich.publications.db.publications.states.States;

/**
 * The generated base for the {@link
 * org.redlich.publications.db.publications.states.States}-interface
 * representing entities of the {@code states}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStates {
    
    /**
     * This Field corresponds to the {@link States} field that can be obtained
     * using the {@link States#getId()} method.
     */
    final LongField<States, Long> ID = LongField.create(
        Identifier.ID,
        States::getId,
        States::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link States} field that can be obtained
     * using the {@link States#getVersion()} method.
     */
    final LongField<States, Long> VERSION = LongField.create(
        Identifier.VERSION,
        States::getVersion,
        States::setVersion,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link States} field that can be obtained
     * using the {@link States#getState()} method.
     */
    final StringField<States, String> STATE = StringField.create(
        Identifier.STATE,
        States::getState,
        States::setState,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link States} field that can be obtained
     * using the {@link States#getMnemonic()} method.
     */
    final StringField<States, String> MNEMONIC = StringField.create(
        Identifier.MNEMONIC,
        o -> OptionalUtil.unwrap(o.getMnemonic()),
        States::setMnemonic,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this States. The id field corresponds to the database
     * column db.publications.states.id.
     * 
     * @return the id of this States
     */
    long getId();
    
    /**
     * Returns the version of this States. The version field corresponds to the
     * database column db.publications.states.version.
     * 
     * @return the version of this States
     */
    long getVersion();
    
    /**
     * Returns the state of this States. The state field corresponds to the
     * database column db.publications.states.state.
     * 
     * @return the state of this States
     */
    String getState();
    
    /**
     * Returns the mnemonic of this States. The mnemonic field corresponds to
     * the database column db.publications.states.mnemonic.
     * 
     * @return the mnemonic of this States
     */
    Optional<String> getMnemonic();
    
    /**
     * Sets the id of this States. The id field corresponds to the database
     * column db.publications.states.id.
     * 
     * @param id to set of this States
     * @return   this States instance
     */
    States setId(long id);
    
    /**
     * Sets the version of this States. The version field corresponds to the
     * database column db.publications.states.version.
     * 
     * @param version to set of this States
     * @return        this States instance
     */
    States setVersion(long version);
    
    /**
     * Sets the state of this States. The state field corresponds to the
     * database column db.publications.states.state.
     * 
     * @param state to set of this States
     * @return      this States instance
     */
    States setState(String state);
    
    /**
     * Sets the mnemonic of this States. The mnemonic field corresponds to the
     * database column db.publications.states.mnemonic.
     * 
     * @param mnemonic to set of this States
     * @return         this States instance
     */
    States setMnemonic(String mnemonic);
    
    enum Identifier implements ColumnIdentifier<States> {
        
        ID       ("id"),
        VERSION  ("version"),
        STATE    ("state"),
        MNEMONIC ("mnemonic");
        
        private final String columnName;
        private final TableIdentifier<States> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "publications";
        }
        
        @Override
        public String getTableName() {
            return "states";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<States> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}