package org.redlich.publications.db.publications.states.generated;

import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import org.redlich.publications.db.publications.states.States;

/**
 * The generated base implementation of the {@link
 * org.redlich.publications.db.publications.states.States}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStatesImpl implements States {
    
    private long id;
    private long version;
    private String state;
    private String mnemonic;
    
    protected GeneratedStatesImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getVersion() {
        return version;
    }
    
    @Override
    public String getState() {
        return state;
    }
    
    @Override
    public Optional<String> getMnemonic() {
        return Optional.ofNullable(mnemonic);
    }
    
    @Override
    public States setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public States setVersion(long version) {
        this.version = version;
        return this;
    }
    
    @Override
    public States setState(String state) {
        this.state = state;
        return this;
    }
    
    @Override
    public States setMnemonic(String mnemonic) {
        this.mnemonic = mnemonic;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "       + Objects.toString(getId()));
        sj.add("version = "  + Objects.toString(getVersion()));
        sj.add("state = "    + Objects.toString(getState()));
        sj.add("mnemonic = " + Objects.toString(OptionalUtil.unwrap(getMnemonic())));
        return "StatesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof States)) { return false; }
        final States thatStates = (States)that;
        if (this.getId() != thatStates.getId()) {return false; }
        if (this.getVersion() != thatStates.getVersion()) {return false; }
        if (!Objects.equals(this.getState(), thatStates.getState())) {return false; }
        if (!Objects.equals(this.getMnemonic(), thatStates.getMnemonic())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getVersion());
        hash = 31 * hash + Objects.hashCode(getState());
        hash = 31 * hash + Objects.hashCode(getMnemonic());
        return hash;
    }
}