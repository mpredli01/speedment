package org.redlich.publications.db.publications.publishers.generated;

import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import org.redlich.publications.db.publications.publishers.Publishers;

/**
 * The generated base implementation of the {@link
 * org.redlich.publications.db.publications.publishers.Publishers}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublishersImpl implements Publishers {
    
    private long id;
    private long version;
    private String publisher;
    private String lastName;
    private String firstName;
    private String email;
    private String phone;
    
    protected GeneratedPublishersImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getVersion() {
        return version;
    }
    
    @Override
    public String getPublisher() {
        return publisher;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Optional<String> getPhone() {
        return Optional.ofNullable(phone);
    }
    
    @Override
    public Publishers setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Publishers setVersion(long version) {
        this.version = version;
        return this;
    }
    
    @Override
    public Publishers setPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }
    
    @Override
    public Publishers setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public Publishers setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public Publishers setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public Publishers setPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("version = "   + Objects.toString(getVersion()));
        sj.add("publisher = " + Objects.toString(getPublisher()));
        sj.add("lastName = "  + Objects.toString(getLastName()));
        sj.add("firstName = " + Objects.toString(getFirstName()));
        sj.add("email = "     + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("phone = "     + Objects.toString(OptionalUtil.unwrap(getPhone())));
        return "PublishersImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Publishers)) { return false; }
        final Publishers thatPublishers = (Publishers)that;
        if (this.getId() != thatPublishers.getId()) {return false; }
        if (this.getVersion() != thatPublishers.getVersion()) {return false; }
        if (!Objects.equals(this.getPublisher(), thatPublishers.getPublisher())) {return false; }
        if (!Objects.equals(this.getLastName(), thatPublishers.getLastName())) {return false; }
        if (!Objects.equals(this.getFirstName(), thatPublishers.getFirstName())) {return false; }
        if (!Objects.equals(this.getEmail(), thatPublishers.getEmail())) {return false; }
        if (!Objects.equals(this.getPhone(), thatPublishers.getPhone())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getVersion());
        hash = 31 * hash + Objects.hashCode(getPublisher());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getPhone());
        return hash;
    }
}