package org.redlich.publications.db.publications.publications.generated;

import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import org.redlich.publications.db.publications.authors.Authors;
import org.redlich.publications.db.publications.publications.Publications;
import org.redlich.publications.db.publications.publishers.Publishers;
import org.redlich.publications.db.publications.types.Types;

/**
 * The generated base implementation of the {@link
 * org.redlich.publications.db.publications.publications.Publications}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublicationsImpl implements Publications {
    
    private long id;
    private long version;
    private long typeId;
    private String title;
    private long authorId;
    private long publisherId;
    private Timestamp dueDate;
    private Timestamp submitDate;
    private Timestamp publishDate;
    private String url;
    
    protected GeneratedPublicationsImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getVersion() {
        return version;
    }
    
    @Override
    public long getTypeId() {
        return typeId;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public long getAuthorId() {
        return authorId;
    }
    
    @Override
    public long getPublisherId() {
        return publisherId;
    }
    
    @Override
    public Optional<Timestamp> getDueDate() {
        return Optional.ofNullable(dueDate);
    }
    
    @Override
    public Optional<Timestamp> getSubmitDate() {
        return Optional.ofNullable(submitDate);
    }
    
    @Override
    public Optional<Timestamp> getPublishDate() {
        return Optional.ofNullable(publishDate);
    }
    
    @Override
    public Optional<String> getUrl() {
        return Optional.ofNullable(url);
    }
    
    @Override
    public Publications setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Publications setVersion(long version) {
        this.version = version;
        return this;
    }
    
    @Override
    public Publications setTypeId(long typeId) {
        this.typeId = typeId;
        return this;
    }
    
    @Override
    public Publications setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public Publications setAuthorId(long authorId) {
        this.authorId = authorId;
        return this;
    }
    
    @Override
    public Publications setPublisherId(long publisherId) {
        this.publisherId = publisherId;
        return this;
    }
    
    @Override
    public Publications setDueDate(Timestamp dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    @Override
    public Publications setSubmitDate(Timestamp submitDate) {
        this.submitDate = submitDate;
        return this;
    }
    
    @Override
    public Publications setPublishDate(Timestamp publishDate) {
        this.publishDate = publishDate;
        return this;
    }
    
    @Override
    public Publications setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Types findTypeId(Manager<Types> foreignManager) {
        return foreignManager.stream().filter(Types.ID.equal(getTypeId())).findAny().orElse(null);
    }
    
    @Override
    public Authors findAuthorId(Manager<Authors> foreignManager) {
        return foreignManager.stream().filter(Authors.ID.equal(getAuthorId())).findAny().orElse(null);
    }
    
    @Override
    public Publishers findPublisherId(Manager<Publishers> foreignManager) {
        return foreignManager.stream().filter(Publishers.ID.equal(getPublisherId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(getId()));
        sj.add("version = "     + Objects.toString(getVersion()));
        sj.add("typeId = "      + Objects.toString(getTypeId()));
        sj.add("title = "       + Objects.toString(getTitle()));
        sj.add("authorId = "    + Objects.toString(getAuthorId()));
        sj.add("publisherId = " + Objects.toString(getPublisherId()));
        sj.add("dueDate = "     + Objects.toString(OptionalUtil.unwrap(getDueDate())));
        sj.add("submitDate = "  + Objects.toString(OptionalUtil.unwrap(getSubmitDate())));
        sj.add("publishDate = " + Objects.toString(OptionalUtil.unwrap(getPublishDate())));
        sj.add("url = "         + Objects.toString(OptionalUtil.unwrap(getUrl())));
        return "PublicationsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Publications)) { return false; }
        final Publications thatPublications = (Publications)that;
        if (this.getId() != thatPublications.getId()) {return false; }
        if (this.getVersion() != thatPublications.getVersion()) {return false; }
        if (this.getTypeId() != thatPublications.getTypeId()) {return false; }
        if (!Objects.equals(this.getTitle(), thatPublications.getTitle())) {return false; }
        if (this.getAuthorId() != thatPublications.getAuthorId()) {return false; }
        if (this.getPublisherId() != thatPublications.getPublisherId()) {return false; }
        if (!Objects.equals(this.getDueDate(), thatPublications.getDueDate())) {return false; }
        if (!Objects.equals(this.getSubmitDate(), thatPublications.getSubmitDate())) {return false; }
        if (!Objects.equals(this.getPublishDate(), thatPublications.getPublishDate())) {return false; }
        if (!Objects.equals(this.getUrl(), thatPublications.getUrl())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getVersion());
        hash = 31 * hash + Long.hashCode(getTypeId());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Long.hashCode(getAuthorId());
        hash = 31 * hash + Long.hashCode(getPublisherId());
        hash = 31 * hash + Objects.hashCode(getDueDate());
        hash = 31 * hash + Objects.hashCode(getSubmitDate());
        hash = 31 * hash + Objects.hashCode(getPublishDate());
        hash = 31 * hash + Objects.hashCode(getUrl());
        return hash;
    }
}