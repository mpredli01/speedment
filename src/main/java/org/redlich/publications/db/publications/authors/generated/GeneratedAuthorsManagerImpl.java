package org.redlich.publications.db.publications.authors.generated;

import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;
import java.util.stream.Stream;
import org.redlich.publications.db.publications.authors.Authors;

/**
 * The generated base implementation for the manager of every {@link
 * org.redlich.publications.db.publications.authors.Authors} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAuthorsManagerImpl extends AbstractManager<Authors> implements GeneratedAuthorsManager {
    
    private final TableIdentifier<Authors> tableIdentifier;
    
    protected GeneratedAuthorsManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("db", "publications", "authors");
    }
    
    @Override
    public TableIdentifier<Authors> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<Authors>> fields() {
        return Stream.of(
            Authors.ID,
            Authors.VERSION,
            Authors.PREFIX,
            Authors.LAST_NAME,
            Authors.FIRST_NAME,
            Authors.MIDDLE_INIT,
            Authors.SUFFIX,
            Authors.ADDRESS,
            Authors.CITY,
            Authors.STATE_ID,
            Authors.ZIP_CODE,
            Authors.HOME_PHONE,
            Authors.CELL_PHONE,
            Authors.WORK_PHONE,
            Authors.HOME_EMAIL,
            Authors.WORK_EMAIL
        );
    }
    
    @Override
    public Stream<Field<Authors>> primaryKeyFields() {
        return Stream.of(
            Authors.ID
        );
    }
}