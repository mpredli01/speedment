package org.redlich.publications.db.publications.publishers.generated;

import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import org.redlich.publications.db.publications.publishers.Publishers;

/**
 * The generated base for the {@link
 * org.redlich.publications.db.publications.publishers.Publishers}-interface
 * representing entities of the {@code publishers}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPublishers {
    
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getId()} method.
     */
    final LongField<Publishers, Long> ID = LongField.create(
        Identifier.ID,
        Publishers::getId,
        Publishers::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getVersion()} method.
     */
    final LongField<Publishers, Long> VERSION = LongField.create(
        Identifier.VERSION,
        Publishers::getVersion,
        Publishers::setVersion,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getPublisher()} method.
     */
    final StringField<Publishers, String> PUBLISHER = StringField.create(
        Identifier.PUBLISHER,
        Publishers::getPublisher,
        Publishers::setPublisher,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getLastName()} method.
     */
    final StringField<Publishers, String> LAST_NAME = StringField.create(
        Identifier.LAST_NAME,
        Publishers::getLastName,
        Publishers::setLastName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getFirstName()} method.
     */
    final StringField<Publishers, String> FIRST_NAME = StringField.create(
        Identifier.FIRST_NAME,
        Publishers::getFirstName,
        Publishers::setFirstName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getEmail()} method.
     */
    final StringField<Publishers, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        Publishers::setEmail,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Publishers} field that can be
     * obtained using the {@link Publishers#getPhone()} method.
     */
    final StringField<Publishers, String> PHONE = StringField.create(
        Identifier.PHONE,
        o -> OptionalUtil.unwrap(o.getPhone()),
        Publishers::setPhone,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Publishers. The id field corresponds to the
     * database column db.publications.publishers.id.
     * 
     * @return the id of this Publishers
     */
    long getId();
    
    /**
     * Returns the version of this Publishers. The version field corresponds to
     * the database column db.publications.publishers.version.
     * 
     * @return the version of this Publishers
     */
    long getVersion();
    
    /**
     * Returns the publisher of this Publishers. The publisher field corresponds
     * to the database column db.publications.publishers.publisher.
     * 
     * @return the publisher of this Publishers
     */
    String getPublisher();
    
    /**
     * Returns the lastName of this Publishers. The lastName field corresponds
     * to the database column db.publications.publishers.last_name.
     * 
     * @return the lastName of this Publishers
     */
    String getLastName();
    
    /**
     * Returns the firstName of this Publishers. The firstName field corresponds
     * to the database column db.publications.publishers.first_name.
     * 
     * @return the firstName of this Publishers
     */
    String getFirstName();
    
    /**
     * Returns the email of this Publishers. The email field corresponds to the
     * database column db.publications.publishers.email.
     * 
     * @return the email of this Publishers
     */
    Optional<String> getEmail();
    
    /**
     * Returns the phone of this Publishers. The phone field corresponds to the
     * database column db.publications.publishers.phone.
     * 
     * @return the phone of this Publishers
     */
    Optional<String> getPhone();
    
    /**
     * Sets the id of this Publishers. The id field corresponds to the database
     * column db.publications.publishers.id.
     * 
     * @param id to set of this Publishers
     * @return   this Publishers instance
     */
    Publishers setId(long id);
    
    /**
     * Sets the version of this Publishers. The version field corresponds to the
     * database column db.publications.publishers.version.
     * 
     * @param version to set of this Publishers
     * @return        this Publishers instance
     */
    Publishers setVersion(long version);
    
    /**
     * Sets the publisher of this Publishers. The publisher field corresponds to
     * the database column db.publications.publishers.publisher.
     * 
     * @param publisher to set of this Publishers
     * @return          this Publishers instance
     */
    Publishers setPublisher(String publisher);
    
    /**
     * Sets the lastName of this Publishers. The lastName field corresponds to
     * the database column db.publications.publishers.last_name.
     * 
     * @param lastName to set of this Publishers
     * @return         this Publishers instance
     */
    Publishers setLastName(String lastName);
    
    /**
     * Sets the firstName of this Publishers. The firstName field corresponds to
     * the database column db.publications.publishers.first_name.
     * 
     * @param firstName to set of this Publishers
     * @return          this Publishers instance
     */
    Publishers setFirstName(String firstName);
    
    /**
     * Sets the email of this Publishers. The email field corresponds to the
     * database column db.publications.publishers.email.
     * 
     * @param email to set of this Publishers
     * @return      this Publishers instance
     */
    Publishers setEmail(String email);
    
    /**
     * Sets the phone of this Publishers. The phone field corresponds to the
     * database column db.publications.publishers.phone.
     * 
     * @param phone to set of this Publishers
     * @return      this Publishers instance
     */
    Publishers setPhone(String phone);
    
    enum Identifier implements ColumnIdentifier<Publishers> {
        
        ID         ("id"),
        VERSION    ("version"),
        PUBLISHER  ("publisher"),
        LAST_NAME  ("last_name"),
        FIRST_NAME ("first_name"),
        EMAIL      ("email"),
        PHONE      ("phone");
        
        private final String columnName;
        private final TableIdentifier<Publishers> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "publications";
        }
        
        @Override
        public String getTableName() {
            return "publishers";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Publishers> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}