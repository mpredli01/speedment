package org.redlich.publications.db.publications.publications.generated;

import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.redlich.publications.db.publications.publications.Publications;
import org.redlich.publications.db.publications.publications.PublicationsImpl;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * org.redlich.publications.db.publications.publications.Publications} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublicationsSqlAdapter {
    
    private final TableIdentifier<Publications> tableIdentifier;
    
    protected GeneratedPublicationsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db", "publications", "publications");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent, @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Publications apply(ResultSet resultSet) throws SpeedmentException {
        final Publications entity = createEntity();
        try {
            entity.setId(          resultSet.getLong(1)      );
            entity.setVersion(     resultSet.getLong(2)      );
            entity.setTypeId(      resultSet.getLong(3)      );
            entity.setTitle(       resultSet.getString(4)    );
            entity.setAuthorId(    resultSet.getLong(5)      );
            entity.setPublisherId( resultSet.getLong(6)      );
            entity.setDueDate(     resultSet.getTimestamp(7) );
            entity.setSubmitDate(  resultSet.getTimestamp(8) );
            entity.setPublishDate( resultSet.getTimestamp(9) );
            entity.setUrl(         resultSet.getString(10)   );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected PublicationsImpl createEntity() {
        return new PublicationsImpl();
    }
}