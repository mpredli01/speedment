package org.redlich.publications.db.publications.types.generated;

import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import org.redlich.publications.db.publications.types.Types;

/**
 * The generated base for the {@link
 * org.redlich.publications.db.publications.types.Types}-interface representing
 * entities of the {@code types}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTypes {
    
    /**
     * This Field corresponds to the {@link Types} field that can be obtained
     * using the {@link Types#getId()} method.
     */
    final LongField<Types, Long> ID = LongField.create(
        Identifier.ID,
        Types::getId,
        Types::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Types} field that can be obtained
     * using the {@link Types#getVersion()} method.
     */
    final LongField<Types, Long> VERSION = LongField.create(
        Identifier.VERSION,
        Types::getVersion,
        Types::setVersion,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Types} field that can be obtained
     * using the {@link Types#getType()} method.
     */
    final StringField<Types, String> TYPE = StringField.create(
        Identifier.TYPE,
        Types::getType,
        Types::setType,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Types. The id field corresponds to the database
     * column db.publications.types.id.
     * 
     * @return the id of this Types
     */
    long getId();
    
    /**
     * Returns the version of this Types. The version field corresponds to the
     * database column db.publications.types.version.
     * 
     * @return the version of this Types
     */
    long getVersion();
    
    /**
     * Returns the type of this Types. The type field corresponds to the
     * database column db.publications.types.type.
     * 
     * @return the type of this Types
     */
    String getType();
    
    /**
     * Sets the id of this Types. The id field corresponds to the database
     * column db.publications.types.id.
     * 
     * @param id to set of this Types
     * @return   this Types instance
     */
    Types setId(long id);
    
    /**
     * Sets the version of this Types. The version field corresponds to the
     * database column db.publications.types.version.
     * 
     * @param version to set of this Types
     * @return        this Types instance
     */
    Types setVersion(long version);
    
    /**
     * Sets the type of this Types. The type field corresponds to the database
     * column db.publications.types.type.
     * 
     * @param type to set of this Types
     * @return     this Types instance
     */
    Types setType(String type);
    
    enum Identifier implements ColumnIdentifier<Types> {
        
        ID      ("id"),
        VERSION ("version"),
        TYPE    ("type");
        
        private final String columnName;
        private final TableIdentifier<Types> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "publications";
        }
        
        @Override
        public String getTableName() {
            return "types";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Types> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}