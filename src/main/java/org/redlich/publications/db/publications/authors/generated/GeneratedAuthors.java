package org.redlich.publications.db.publications.authors.generated;

import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import org.redlich.publications.db.publications.authors.Authors;
import org.redlich.publications.db.publications.states.States;

/**
 * The generated base for the {@link
 * org.redlich.publications.db.publications.authors.Authors}-interface
 * representing entities of the {@code authors}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthors {
    
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getId()} method.
     */
    final LongField<Authors, Long> ID = LongField.create(
        Identifier.ID,
        Authors::getId,
        Authors::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getVersion()} method.
     */
    final LongField<Authors, Long> VERSION = LongField.create(
        Identifier.VERSION,
        Authors::getVersion,
        Authors::setVersion,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getPrefix()} method.
     */
    final StringField<Authors, String> PREFIX = StringField.create(
        Identifier.PREFIX,
        o -> OptionalUtil.unwrap(o.getPrefix()),
        Authors::setPrefix,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getLastName()} method.
     */
    final StringField<Authors, String> LAST_NAME = StringField.create(
        Identifier.LAST_NAME,
        Authors::getLastName,
        Authors::setLastName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getFirstName()} method.
     */
    final StringField<Authors, String> FIRST_NAME = StringField.create(
        Identifier.FIRST_NAME,
        Authors::getFirstName,
        Authors::setFirstName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getMiddleInit()} method.
     */
    final StringField<Authors, String> MIDDLE_INIT = StringField.create(
        Identifier.MIDDLE_INIT,
        o -> OptionalUtil.unwrap(o.getMiddleInit()),
        Authors::setMiddleInit,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getSuffix()} method.
     */
    final StringField<Authors, String> SUFFIX = StringField.create(
        Identifier.SUFFIX,
        o -> OptionalUtil.unwrap(o.getSuffix()),
        Authors::setSuffix,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getAddress()} method.
     */
    final StringField<Authors, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        Authors::setAddress,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getCity()} method.
     */
    final StringField<Authors, String> CITY = StringField.create(
        Identifier.CITY,
        o -> OptionalUtil.unwrap(o.getCity()),
        Authors::setCity,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getStateId()} method.
     */
    final LongForeignKeyField<Authors, Long, States> STATE_ID = LongForeignKeyField.create(
        Identifier.STATE_ID,
        Authors::getStateId,
        Authors::setStateId,
        States.ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getZipCode()} method.
     */
    final StringField<Authors, String> ZIP_CODE = StringField.create(
        Identifier.ZIP_CODE,
        Authors::getZipCode,
        Authors::setZipCode,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getHomePhone()} method.
     */
    final StringField<Authors, String> HOME_PHONE = StringField.create(
        Identifier.HOME_PHONE,
        o -> OptionalUtil.unwrap(o.getHomePhone()),
        Authors::setHomePhone,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getCellPhone()} method.
     */
    final StringField<Authors, String> CELL_PHONE = StringField.create(
        Identifier.CELL_PHONE,
        o -> OptionalUtil.unwrap(o.getCellPhone()),
        Authors::setCellPhone,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getWorkPhone()} method.
     */
    final StringField<Authors, String> WORK_PHONE = StringField.create(
        Identifier.WORK_PHONE,
        o -> OptionalUtil.unwrap(o.getWorkPhone()),
        Authors::setWorkPhone,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getHomeEmail()} method.
     */
    final StringField<Authors, String> HOME_EMAIL = StringField.create(
        Identifier.HOME_EMAIL,
        o -> OptionalUtil.unwrap(o.getHomeEmail()),
        Authors::setHomeEmail,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getWorkEmail()} method.
     */
    final StringField<Authors, String> WORK_EMAIL = StringField.create(
        Identifier.WORK_EMAIL,
        o -> OptionalUtil.unwrap(o.getWorkEmail()),
        Authors::setWorkEmail,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Authors. The id field corresponds to the database
     * column db.publications.authors.id.
     * 
     * @return the id of this Authors
     */
    long getId();
    
    /**
     * Returns the version of this Authors. The version field corresponds to the
     * database column db.publications.authors.version.
     * 
     * @return the version of this Authors
     */
    long getVersion();
    
    /**
     * Returns the prefix of this Authors. The prefix field corresponds to the
     * database column db.publications.authors.prefix.
     * 
     * @return the prefix of this Authors
     */
    Optional<String> getPrefix();
    
    /**
     * Returns the lastName of this Authors. The lastName field corresponds to
     * the database column db.publications.authors.last_name.
     * 
     * @return the lastName of this Authors
     */
    String getLastName();
    
    /**
     * Returns the firstName of this Authors. The firstName field corresponds to
     * the database column db.publications.authors.first_name.
     * 
     * @return the firstName of this Authors
     */
    String getFirstName();
    
    /**
     * Returns the middleInit of this Authors. The middleInit field corresponds
     * to the database column db.publications.authors.middle_init.
     * 
     * @return the middleInit of this Authors
     */
    Optional<String> getMiddleInit();
    
    /**
     * Returns the suffix of this Authors. The suffix field corresponds to the
     * database column db.publications.authors.suffix.
     * 
     * @return the suffix of this Authors
     */
    Optional<String> getSuffix();
    
    /**
     * Returns the address of this Authors. The address field corresponds to the
     * database column db.publications.authors.address.
     * 
     * @return the address of this Authors
     */
    Optional<String> getAddress();
    
    /**
     * Returns the city of this Authors. The city field corresponds to the
     * database column db.publications.authors.city.
     * 
     * @return the city of this Authors
     */
    Optional<String> getCity();
    
    /**
     * Returns the stateId of this Authors. The stateId field corresponds to the
     * database column db.publications.authors.state_id.
     * 
     * @return the stateId of this Authors
     */
    long getStateId();
    
    /**
     * Returns the zipCode of this Authors. The zipCode field corresponds to the
     * database column db.publications.authors.zip_code.
     * 
     * @return the zipCode of this Authors
     */
    String getZipCode();
    
    /**
     * Returns the homePhone of this Authors. The homePhone field corresponds to
     * the database column db.publications.authors.home_phone.
     * 
     * @return the homePhone of this Authors
     */
    Optional<String> getHomePhone();
    
    /**
     * Returns the cellPhone of this Authors. The cellPhone field corresponds to
     * the database column db.publications.authors.cell_phone.
     * 
     * @return the cellPhone of this Authors
     */
    Optional<String> getCellPhone();
    
    /**
     * Returns the workPhone of this Authors. The workPhone field corresponds to
     * the database column db.publications.authors.work_phone.
     * 
     * @return the workPhone of this Authors
     */
    Optional<String> getWorkPhone();
    
    /**
     * Returns the homeEmail of this Authors. The homeEmail field corresponds to
     * the database column db.publications.authors.home_email.
     * 
     * @return the homeEmail of this Authors
     */
    Optional<String> getHomeEmail();
    
    /**
     * Returns the workEmail of this Authors. The workEmail field corresponds to
     * the database column db.publications.authors.work_email.
     * 
     * @return the workEmail of this Authors
     */
    Optional<String> getWorkEmail();
    
    /**
     * Sets the id of this Authors. The id field corresponds to the database
     * column db.publications.authors.id.
     * 
     * @param id to set of this Authors
     * @return   this Authors instance
     */
    Authors setId(long id);
    
    /**
     * Sets the version of this Authors. The version field corresponds to the
     * database column db.publications.authors.version.
     * 
     * @param version to set of this Authors
     * @return        this Authors instance
     */
    Authors setVersion(long version);
    
    /**
     * Sets the prefix of this Authors. The prefix field corresponds to the
     * database column db.publications.authors.prefix.
     * 
     * @param prefix to set of this Authors
     * @return       this Authors instance
     */
    Authors setPrefix(String prefix);
    
    /**
     * Sets the lastName of this Authors. The lastName field corresponds to the
     * database column db.publications.authors.last_name.
     * 
     * @param lastName to set of this Authors
     * @return         this Authors instance
     */
    Authors setLastName(String lastName);
    
    /**
     * Sets the firstName of this Authors. The firstName field corresponds to
     * the database column db.publications.authors.first_name.
     * 
     * @param firstName to set of this Authors
     * @return          this Authors instance
     */
    Authors setFirstName(String firstName);
    
    /**
     * Sets the middleInit of this Authors. The middleInit field corresponds to
     * the database column db.publications.authors.middle_init.
     * 
     * @param middleInit to set of this Authors
     * @return           this Authors instance
     */
    Authors setMiddleInit(String middleInit);
    
    /**
     * Sets the suffix of this Authors. The suffix field corresponds to the
     * database column db.publications.authors.suffix.
     * 
     * @param suffix to set of this Authors
     * @return       this Authors instance
     */
    Authors setSuffix(String suffix);
    
    /**
     * Sets the address of this Authors. The address field corresponds to the
     * database column db.publications.authors.address.
     * 
     * @param address to set of this Authors
     * @return        this Authors instance
     */
    Authors setAddress(String address);
    
    /**
     * Sets the city of this Authors. The city field corresponds to the database
     * column db.publications.authors.city.
     * 
     * @param city to set of this Authors
     * @return     this Authors instance
     */
    Authors setCity(String city);
    
    /**
     * Sets the stateId of this Authors. The stateId field corresponds to the
     * database column db.publications.authors.state_id.
     * 
     * @param stateId to set of this Authors
     * @return        this Authors instance
     */
    Authors setStateId(long stateId);
    
    /**
     * Sets the zipCode of this Authors. The zipCode field corresponds to the
     * database column db.publications.authors.zip_code.
     * 
     * @param zipCode to set of this Authors
     * @return        this Authors instance
     */
    Authors setZipCode(String zipCode);
    
    /**
     * Sets the homePhone of this Authors. The homePhone field corresponds to
     * the database column db.publications.authors.home_phone.
     * 
     * @param homePhone to set of this Authors
     * @return          this Authors instance
     */
    Authors setHomePhone(String homePhone);
    
    /**
     * Sets the cellPhone of this Authors. The cellPhone field corresponds to
     * the database column db.publications.authors.cell_phone.
     * 
     * @param cellPhone to set of this Authors
     * @return          this Authors instance
     */
    Authors setCellPhone(String cellPhone);
    
    /**
     * Sets the workPhone of this Authors. The workPhone field corresponds to
     * the database column db.publications.authors.work_phone.
     * 
     * @param workPhone to set of this Authors
     * @return          this Authors instance
     */
    Authors setWorkPhone(String workPhone);
    
    /**
     * Sets the homeEmail of this Authors. The homeEmail field corresponds to
     * the database column db.publications.authors.home_email.
     * 
     * @param homeEmail to set of this Authors
     * @return          this Authors instance
     */
    Authors setHomeEmail(String homeEmail);
    
    /**
     * Sets the workEmail of this Authors. The workEmail field corresponds to
     * the database column db.publications.authors.work_email.
     * 
     * @param workEmail to set of this Authors
     * @return          this Authors instance
     */
    Authors setWorkEmail(String workEmail);
    
    /**
     * Queries the specified manager for the referenced States. If no such
     * States exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    States findStateId(Manager<States> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Authors> {
        
        ID          ("id"),
        VERSION     ("version"),
        PREFIX      ("prefix"),
        LAST_NAME   ("last_name"),
        FIRST_NAME  ("first_name"),
        MIDDLE_INIT ("middle_init"),
        SUFFIX      ("suffix"),
        ADDRESS     ("address"),
        CITY        ("city"),
        STATE_ID    ("state_id"),
        ZIP_CODE    ("zip_code"),
        HOME_PHONE  ("home_phone"),
        CELL_PHONE  ("cell_phone"),
        WORK_PHONE  ("work_phone"),
        HOME_EMAIL  ("home_email"),
        WORK_EMAIL  ("work_email");
        
        private final String columnName;
        private final TableIdentifier<Authors> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db";
        }
        
        @Override
        public String getSchemaName() {
            return "publications";
        }
        
        @Override
        public String getTableName() {
            return "authors";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Authors> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}