package org.redlich.publications.db.publications.types.generated;

import com.speedment.runtime.core.annotation.GeneratedCode;
import java.util.Objects;
import java.util.StringJoiner;
import org.redlich.publications.db.publications.types.Types;

/**
 * The generated base implementation of the {@link
 * org.redlich.publications.db.publications.types.Types}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTypesImpl implements Types {
    
    private long id;
    private long version;
    private String type;
    
    protected GeneratedTypesImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getVersion() {
        return version;
    }
    
    @Override
    public String getType() {
        return type;
    }
    
    @Override
    public Types setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Types setVersion(long version) {
        this.version = version;
        return this;
    }
    
    @Override
    public Types setType(String type) {
        this.type = type;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "      + Objects.toString(getId()));
        sj.add("version = " + Objects.toString(getVersion()));
        sj.add("type = "    + Objects.toString(getType()));
        return "TypesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Types)) { return false; }
        final Types thatTypes = (Types)that;
        if (this.getId() != thatTypes.getId()) {return false; }
        if (this.getVersion() != thatTypes.getVersion()) {return false; }
        if (!Objects.equals(this.getType(), thatTypes.getType())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getVersion());
        hash = 31 * hash + Objects.hashCode(getType());
        return hash;
    }
}